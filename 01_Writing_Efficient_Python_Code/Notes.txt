We want to code to gain quick insights out of data

Efficient code 
    fast runtime
    small memory footprint

pythonic code == Efficient code

Zen of Python by Tim Peters -- 19 idioms -- guiding principles for any pythonista -- PEP20
Python Enhancement Proposals -- PEPs

import this --- Zen of python


--------------------------------------------------------------------------------------------------------------------------------
# Print the list created using the Non-Pythonic approach
i = 0
new_list= []
while i < len(names):
    if len(names[i]) >= 6:
        new_list.append(names[i])
    i += 1
print(new_list)


# Print the list created by looping over the contents of names
better_list = []
for name in names:
    if len(name) >= 6:
        better_list.append(name)
print(better_list)

# Print the list created by using list comprehension
best_list = [name for name in names if len(name) >= 6]
print(best_list)
--------------------------------------------------------------------------------------------------------------------------------



Python 3.6 Standard Library

list 
tuple
set
dict
print()
len()
range()
round()
enumerate()
map()
zip()
str.upper()
str.lower()
os
sys
itertools
collections
math



range(start, stop, step) -- returns a range object  [start, stop)

enumerate(list) -- tuples of index, value pairs --- enumerate object

enumerate(list, start = 5) # indexing starts from 5, if not mentioned, starts at 0

map(round, nums) --  applies round function to each element of nums object

map(lambda x: x **2, nums) -- applies lambda function to each element of nums object


--------------------------------------------------------------------------------------------------------------------------------
# Create a range object that goes from 0 to 5
nums = range(6)
print(type(nums))

# Convert nums to a list
nums_list = list(nums)
print(nums_list)

# Create a new list of odd numbers from 1 to 11 by unpacking a range object
nums_list2 = [*range(1,12,2)] # * unpacks into a list
print(nums_list2)

--------------------------------------------------------------------------------------------------------------------------------
# Rewrite the for loop to use enumerate
indexed_names = []
for i,name in enumerate(names):
    index_name = (i,name)
    indexed_names.append(index_name) 
print(indexed_names)

# Rewrite the above for loop using list comprehension
indexed_names_comp = [(i,name) for i,name in enumerate(names)]
print(indexed_names_comp)

# Unpack an enumerate object with a starting index of one
indexed_names_unpack = [*enumerate(names, start = 1)]
print(indexed_names_unpack)

--------------------------------------------------------------------------------------------------------------------------------

# Use map to apply str.upper to each element in names
names_map  = map(str.upper, names) # returns a map object

# Print the type of the names_map
print(type(names_map))

# Unpack names_map into a list
names_uppercase = [*names_map]

# Print the list created above
print(names_uppercase)

--------------------------------------------------------------------------------------------------------------------------------

Numerical Python -- NumPy
NumPy arrays are homogeneous # eliminates the need for datatype checking 
numpy_array.dtype -- gives the dtype of the array


numpy array broadcasting -- vectorize operations


nums2[0][1]
nums2_np[0,1]

[row[0] for row in nums2]
nums2_np[:,0]

NumPy arrays for boolean indexing


# Print second row of nums
print(nums[1,:])

# Print all elements of nums that are greater than six
print(nums[nums > 6])

# Double every element of nums
nums_dbl = nums * 2
print(nums_dbl)

# Replace the third column of nums
nums[:,2] = nums[:,2] + 1
print(nums)


# Create a list of arrival times
arrival_times = [*range(10,60,10)]

# Convert arrival_times to an array and update the times
arrival_times_np = np.array(arrival_times)
new_times = arrival_times_np - 3

# Use list comprehension and enumerate to pair guests to new times
guest_arrivals = [(names[i],time) for i,time in enumerate(new_times)]

# Map the welcome_guest function to each (guest,time) pair
welcome_map = map(welcome_guest, guest_arrivals)

guest_welcomes = [*welcome_map]
print(*guest_welcomes, sep='\n')