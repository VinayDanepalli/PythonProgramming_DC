We want to code to gain quick insights out of data

Efficient code 
    fast runtime
    small memory footprint

pythonic code == Efficient code

Zen of Python by Tim Peters -- 19 idioms -- guiding principles for any pythonista -- PEP20
Python Enhancement Proposals -- PEPs

import this --- Zen of python


--------------------------------------------------------------------------------------------------------------------------------
# Print the list created using the Non-Pythonic approach
i = 0
new_list= []
while i < len(names):
    if len(names[i]) >= 6:
        new_list.append(names[i])
    i += 1
print(new_list)


# Print the list created by looping over the contents of names
better_list = []
for name in names:
    if len(name) >= 6:
        better_list.append(name)
print(better_list)

# Print the list created by using list comprehension
best_list = [name for name in names if len(name) >= 6]
print(best_list)
--------------------------------------------------------------------------------------------------------------------------------



Python 3.6 Standard Library

list() -- []
tuple()-- ()
set
dict() -- {}
print()
len()
range()
round()
enumerate()
map()
zip()
str.upper()
str.lower()
os
sys
itertools
collections
math



range(start, stop, step) -- returns a range object  [start, stop)

enumerate(list) -- tuples of index, value pairs --- enumerate object

enumerate(list, start = 5) # indexing starts from 5, if not mentioned, starts at 0

map(round, nums) --  applies round function to each element of nums object

map(lambda x: x **2, nums) -- applies lambda function to each element of nums object


--------------------------------------------------------------------------------------------------------------------------------
# Create a range object that goes from 0 to 5
nums = range(6)
print(type(nums))

# Convert nums to a list
nums_list = list(nums)
print(nums_list)

# Create a new list of odd numbers from 1 to 11 by unpacking a range object
nums_list2 = [*range(1,12,2)] # * unpacks into a list
print(nums_list2)

--------------------------------------------------------------------------------------------------------------------------------
# Rewrite the for loop to use enumerate
indexed_names = []
for i,name in enumerate(names):
    index_name = (i,name)
    indexed_names.append(index_name) 
print(indexed_names)

# Rewrite the above for loop using list comprehension
indexed_names_comp = [(i,name) for i,name in enumerate(names)]
print(indexed_names_comp)

# Unpack an enumerate object with a starting index of one
indexed_names_unpack = [*enumerate(names, start = 1)]
print(indexed_names_unpack)

--------------------------------------------------------------------------------------------------------------------------------

# Use map to apply str.upper to each element in names
names_map  = map(str.upper, names) # returns a map object

# Print the type of the names_map
print(type(names_map))

# Unpack names_map into a list
names_uppercase = [*names_map]

# Print the list created above
print(names_uppercase)

--------------------------------------------------------------------------------------------------------------------------------

Numerical Python -- NumPy
NumPy arrays are homogeneous # eliminates the need for datatype checking 
numpy_array.dtype -- gives the dtype of the array


numpy array broadcasting -- vectorize operations


nums2[0][1]
nums2_np[0,1]

[row[0] for row in nums2]
nums2_np[:,0]

NumPy arrays for boolean indexing


# Print second row of nums
print(nums[1,:])

# Print all elements of nums that are greater than six
print(nums[nums > 6])

# Double every element of nums
nums_dbl = nums * 2
print(nums_dbl)

# Replace the third column of nums
nums[:,2] = nums[:,2] + 1
print(nums)


# Create a list of arrival times
arrival_times = [*range(10,60,10)]

# Convert arrival_times to an array and update the times
arrival_times_np = np.array(arrival_times)
new_times = arrival_times_np - 3

# Use list comprehension and enumerate to pair guests to new times
guest_arrivals = [(names[i],time) for i,time in enumerate(new_times)]

# Map the welcome_guest function to each (guest,time) pair
welcome_map = map(welcome_guest, guest_arrivals)

guest_welcomes = [*welcome_map]
print(*guest_welcomes, sep='\n')


=============================================================================================================================

Magic commands -- enhancements on top of normal python syntax

%lsmagic -- list all magic commands
magic commands begin with %

%timeit -r2 -n10 rand_nums = np.random.rand(1000) # 2 runs, 10 loops 


%timeit -- line magic mode 
%%timeit -- cell magic mode


times = %timeit -o rand_nums = np.random.rand(1000) # saves output to times 
times.timings 
times.best
times.worst 
times.average


s   second      10-0
ms  millisecond 10-3
us  microsecond 10-6
ns  nanosecond  10-9

unpacking is faster than list comprehension in terms of runtimes 

Using python's literal syntax to define a data structure can speed up runtime instead of using formal syntax

Code Profiling 
    Detailed stats on frequency and duration of function calls
    line by line analysis
    line_profiler package is used

    pip instal line_profiler 

%load_ext line_profiler # loads package into ipython console

%lprun -f function_name function_name(arguments) # -f to mention function_name, output provides a table 


Profiling a function allows you to dig deeper into the function's source code and potentially spot bottlenecks.

sys.getsizeof(variable_name) # gets you the memory size of the object 

memory_profiler package for detailed stats on memory consumption 
 
%load_ext memory_profiler
%mprun -f function_name function_name(arguments) 

functions must be defined in a file and imported when using memory_profiler

memory_profiler inspects memory by querying the operating system and hence results may differ between platforms and runs 


BMI -- Body Mass Index = Mass (kg) / Height^2  (m^2)

----------------------------------------------------------------------------------------------------------------------
# Use get_publisher_heroes() to gather Star Wars heroes
star_wars_heroes = get_publisher_heroes(heroes, publishers, 'George Lucas')

print(star_wars_heroes)
print(type(star_wars_heroes))

# Use get_publisher_heroes_np() to gather Star Wars heroes
star_wars_heroes_np = get_publisher_heroes_np(heroes, publishers, 'George Lucas')

print(star_wars_heroes_np)
print(type(star_wars_heroes_np))

----------------------------------------------------------------------------------------------------------------------

namedtuple : tuple subclasses with named fileds
deque : list-like container with fast appends and pops 
Counter : dict for containing hashable objects
OrderedDict : dict that retains order of entries 
defaultdict : dict that calls a factory function to supply missing values

from collections import Counter 
type_counts = Counter(poke_types)


itertools module 
    infinite iterators: count, cycle, repeat
    finite iterators  : accumulate, chain, zip_longest ...
    combination generators : product, permutations, combinations 

    from itertools import combinations 
    combos_obj = combinations(poke_types, 2) 


--------------------------------------------------------------------------------------------------------------

# Combine names and primary_types
names_type1 = [*zip(names, primary_types)]

print(*names_type1[:5], sep='\n')

# Combine all three lists together
names_types = [*zip(names, primary_types,  secondary_types)]

print(*names_types[:5], sep='\n')

--------------------------------------------------------------------------------------------------------------

if you provide zip() with objects of differing lengths, it will only combine until the smallest lengthed object is exhausted

# Collect the count of primary types
type_count = Counter(primary_types)
print(type_count, '\n')

# Collect the count of generations
gen_count = Counter(generations)
print(gen_count, '\n')

# Use list comprehension to get each Pokémon's starting letter
starting_letters = [name[0] for name in names]

# Collect the count of Pokémon for each starting_letter
starting_letters_count = Counter(starting_letters)
print(starting_letters_count) # outputs key value pairs in decreasing order of value 

--------------------------------------------------------------------------------------------------------------

sets 
    intersection() - all elements that are in both sets
    difference() - all elements that are in one set but not in the other
    symmetric_difference() - all elements that are in exactly one set 
    union() - all elements that are in either set (unique)


    membership operator in is faster with sets than with list or tuple

----------------------------------------------------------------------------------------------------------------------------

# Convert both lists to sets
ash_set = set(ash_pokedex)
misty_set = set(misty_pokedex)

# Find the Pokémon that exist in both sets
both = ash_set.intersection(misty_set)
print(both)

# Find the Pokémon that Ash has and Misty does not have
ash_only = ash_set.difference(misty_set)
print(ash_only)

# Find the Pokémon that are in only one set (not both)
unique_to_set = ash_set.symmetric_difference(misty_set)
print(unique_to_set)

----------------------------------------------------------------------------------------------------------------------------

# Use find_unique_items() to collect unique Pokémon names
uniq_names_func = find_unique_items(names)
print(len(uniq_names_func))

# Convert the names list to a set to collect unique Pokémon names
uniq_names_set = set(names)
print(len(uniq_names_set))

# Check that both unique collections are equivalent
print(sorted(uniq_names_func) == sorted(uniq_names_set))


%timeit find_unique_items(names)
%timeit set(names)

# Use find_unique_items() to collect unique Pokémon names
uniq_names_func = find_unique_items(names)
print(len(uniq_names_func))

# Convert the names list to a set to collect unique Pokémon names
uniq_names_set = set(names)
print(len(uniq_names_set))

# Check that both unique collections are equivalent
print(sorted(uniq_names_func) == sorted(uniq_names_set))

# Use the best approach to collect unique primary types and generations
uniq_types = set(primary_types) 
uniq_gens = set(generations)
print(uniq_types, uniq_gens, sep='\n') 

-----------------------------------------------------------------------------------------------------------------------------

# Collect Pokémon that belong to generation 1 or generation 2
gen1_gen2_pokemon = [name for name,gen in zip(poke_names, poke_gens) if gen < 3]

# Create a map object that stores the name lengths
name_lengths_map = map(len, gen1_gen2_pokemon)

# Combine gen1_gen2_pokemon and name_lengths_map into a list
gen1_gen2_name_lengths = [*zip(gen1_gen2_pokemon, name_lengths_map)]

print(gen1_gen2_name_lengths_loop[:5])
print(gen1_gen2_name_lengths[:5])

[(name, len(name)) for name,gen in zip(poke_names, poke_gens) if gen < 3]

-----------------------------------------------------------------------------------------------------------------------------

# Create a total stats array
total_stats_np = stats.sum(axis=1)

# Create an average stats array
avg_stats_np = stats.mean(axis=1)

# Combine names, total_stats_np, and avg_stats_np into a list
poke_list_np = [*zip(names, total_stats_np, avg_stats_np)]

print(poke_list_np == poke_list, '\n')
print(poke_list_np[:3])
print(poke_list[:3], '\n')
top_3 = sorted(poke_list_np, key=lambda x: x[1], reverse=True)[:3]
print('3 strongest Pokémon:\n{}'.format(top_3))

-----------------------------------------------------------------------------------------------------------------------------

Any calculation that doesn't change between the iterations in a loop should be moved above or below the loop
Use holistic conversations below the loop. 
    Say you need to convert tuples generated by the zip() to a list. 
    You can first generate list of tuples using zip()
    Then use [*map(list, list_of_tuples)]


-----------------------------------------------------------------------------------------------------------------------------

# Import Counter
from collections import Counter

# Collect the count of each generation
gen_counts = Counter(generations)

# Improve for loop by moving one calculation above the loop
total_count = len(generations)

for gen,count in gen_counts.items():
    gen_percent = round(count / total_count * 100, 2)
    print('generation {}: count = {:3} percentage = {}'
          .format(gen, count, gen_percent))

-----------------------------------------------------------------------------------------------------------------------------

# Collect all possible pairs using combinations()
possible_pairs = [*combinations(pokemon_types, 2)]

# Create an empty list called enumerated_tuples
enumerated_tuples = []

# Append each enumerated_pair_tuple to the empty list above
for i,pair in enumerate(possible_pairs, 1):
    enumerated_pair_tuple = (i,) + pair
    enumerated_tuples.append(enumerated_pair_tuple)

# Convert all tuples in enumerated_tuples to a list
enumerated_pairs = [*map(list, enumerated_tuples)]
print(enumerated_pairs)

-----------------------------------------------------------------------------------------------------------------------------

# Calculate the total HP avg and total HP standard deviation
hp_avg = hps.mean()
hp_std = hps.std()

# Use NumPy to eliminate the previous for loop
z_scores = (hps - hp_avg)/hp_std

# Combine names, hps, and z_scores
poke_zscores2 = [*zip(names, hps, z_scores)]
print(*poke_zscores2[:3], sep='\n')

# Use list comprehension with the same logic as the highest_hp_pokemon code block 
highest_hp_pokemon2 = [(name, hp, zscore) for name,hp,zscore in poke_zscores2 if zscore > 2]
print(*highest_hp_pokemon2, sep='\n')

-----------------------------------------------------------------------------------------------------------------------------

